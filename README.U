# 🎯 Proyecto: Task Manager (Fullstack CRUD)

## 1. Objetivo
Construir una aplicación Task Manager con CRUD completo, autenticación JWT (con refresh tokens seguros), roles de usuario/admin, frontend en Next.js + Tailwind y backend en Express + MongoDB.
Todo el código debe ser mantenible, documentado y apto para repo público.

---

## 2. Stack Tecnológico
### Frontend
- Next.js (App Router, TypeScript)
- React
- TailwindCSS

### Backend
- Express.js (TypeScript)
- MongoDB (con Mongoose ODM)
- JWT (access + refresh token con seguridad)
- Roles: usuario / admin
- Documentación de endpoints con Swagger + colección Postman exportada

### Infraestructura
- Frontend: deploy en Vercel
- Backend: deploy en Render

---

## 3. Arquitectura y Convenciones

### Frontend
/app
/components
/lib
/styles
/utils

### Backend
/src
/config
/controllers
/models
/routes
/middlewares
/services
/utils

### General
- Usar TypeScript en todo el stack.
- Código formateado con ESLint + Prettier.
- Estructura modular y clara.
- Todos los endpoints deben devolver JSON.

---

## 4. Funcionalidades requeridas
- Registro y login de usuarios.
- Generación de accessToken y refreshToken (seguro, con expiración).
- Roles (usuario/admin) con middlewares de autorización.
- CRUD de tareas:
  - Crear tarea
  - Leer tareas (filtrar por usuario o admin ve todas)
  - Actualizar tarea
  - Eliminar tarea
- Validación de inputs (express-validator o similar).
- Swagger con documentación completa de la API.
- Exportar colección de Postman para testeo manual.

---

## 5. Orden de desarrollo
1. Setup del repo (monorepo o dos repos: `/frontend` y `/backend`).
2. Configuración inicial frontend (Next.js, Tailwind, ESLint/Prettier).
3. Configuración inicial backend (Express, MongoDB, ESLint/Prettier).
4. Modelos de usuario y tarea en MongoDB.
5. Sistema de auth (JWT con refresh token, cookies seguras).
6. Rutas de usuario + auth.
7. Rutas CRUD de tareas con permisos.
8. Middlewares de autorización (roles).
9. Documentación con Swagger y Postman collection.
10. Deploy en Vercel y Render.
11. README con instrucciones claras de setup, variables de entorno y deploy.

---

## 6. Reglas para el Agente
- **No inventar librerías raras**: solo usar las mencionadas.
- **Priorizar seguridad en auth** (refresh tokens en cookies httpOnly + CSRF safe).
- Documentar funciones críticas con TSDoc.
- Preguntar antes de asumir frameworks extra.
- README debe incluir:
  - Setup local paso a paso
  - Variables de entorno necesarias
  - Cómo correr frontend y backend
  - Cómo importar la colección de Postman